{"name":"Musenotificationbus","tagline":"一个Android平台的简单的事件总线库，用于UI线程中各个组件，模块间的通信。","body":"# MuseNotificationBus\r\n一个Android平台的简单的事件总线库，用于UI线程中各个组件，模块间的通信。\r\nversion 1.0 - 2015-11-13 12:53 am\r\n## 基本架构搭建\r\n类似观察者模式，使用反射回调。\r\n\r\n## 生命周期\r\n(*Service 生命周期比 MuseNotificationCenter 长时，Service将接收不到事件通知(Service 中订阅，Service 中接收) *)\r\n结合Activity，Fragment，Service的生命周期，.e.g. 在Activity的 onResume 中订阅，onPause 中取消订阅。\r\n\r\n## 优先级\r\n通知事件处理优先级分为三级：ASAP，NORMAL，IDLE\r\n* ASAP(as soon as possible) 最高级，通知事件会排在同级别事件的后面\r\n* NORMAL 普通级，通知事件会排在同级别事件的后面，NORMAL级别的事件排在ASAP级后面\r\n* IDLE 最低级，通知事件会排在同级别事件的后面， IDLE级别的事件排在ASAP级后面\r\n为了避免事件处理失败导致整个阻塞，采用快速失败返回\r\n\r\n## 回调调用(*TODO 区分UI线程，非UI线程回调*)\r\n在UI线程回调\r\n\r\n## 使用说明\r\n###注册监听\r\n    \r\n    /**\r\n     * 注册观察者\r\n     * @param obj 观察者 not null\r\n     * @param name  订阅主题  not null\r\n     * @param priority  优先级 默认 NORMAL\r\n     * @param selector 回调方法  not null\r\n     * @param paramsMap  回调方法参数\r\n     */\r\n    public void registerObserver(Object obj, String name, int priority, String selector,\r\n                                 LinkedHashMap<String, Class> paramsMap) {\r\n        if(obj == null || name == null || name.length() < 0 || selector == null || selector.length() < 0) {\r\n            return;\r\n        }\r\n        MuseObserver observer = new MuseObserver(priority, obj, name, selector, paramsMap);\r\n        mObserverQueue.add(name, observer);\r\n    }\r\n    \r\n####调用示例\r\n\r\n\r\n    LinkedHashMap<String, Class> paramMap = new LinkedHashMap();\r\n    paramMap.put(\"what\", Integer.class);\r\n    paramMap.put(\"msg\", String.class);\r\n    paramMap.put(\"data\", List.class);\r\n    // 监听对象，观察主题，优先级，回调方法，回调方法参数\r\n    MuseNotificationCenter.instanceMuse().registerObserver(this, \"test\", 1, \"onMessage\", paramMap);\r\n\r\n###post消息\r\n    /**\r\n     * 发布通知\r\n     * @param name  订阅主题\r\n     * @param params  参数\r\n     * @param priority   优先级\r\n     */\r\n    public void postNotification(String name, LinkedHashMap params, int priority) {\r\n        MuseNotification notification = new MuseNotification(priority, name, params);\r\n        mNotifications.add(notification);\r\n    }\r\n####调用示例\r\n    LinkedHashMap paramMap = new LinkedHashMap();\r\n    paramMap.put(\"what\", 2);\r\n    paramMap.put(\"msg\", \"message\");\r\n    List list = new ArrayList<>();\r\n    list.add(\"good\");\r\n    list.add(\"day\");\r\n    paramMap.put(\"data\", list);\r\n    MuseNotificationCenter.instanceMuse().postNotification(\"test\", paramMap);\r\n### 反注册监听\r\n#### 调用示例\r\nMuseNotificationCenter.instanceMuse().unregisterObserver(this);\r\n\r\n## 注意事项\r\nMuseNotificationBus 只处理各组件模块见得通讯，与其他主流的事件总线库不同，MuseNotificationBus 所有的操作都在UI线程完成，相当于Handler 的sendMessage，与handlerMessage 的升级版。\r\n回调的方法不能出现重载的情况，否则可能会导致无法被调用。\r\n\r\n# 迭代计划\r\nversion 1.1\r\n使用线程池实现postNotification(Runnable)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}